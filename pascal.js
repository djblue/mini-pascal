/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,9],$V2=[5,17,44],$V3=[2,16],$V4=[1,20],$V5=[1,23],$V6=[12,13,34],$V7=[5,17],$V8=[1,30],$V9=[7,18],$Va=[1,54],$Vb=[1,57],$Vc=[1,66],$Vd=[1,77],$Ve=[1,76],$Vf=[1,78],$Vg=[5,12],$Vh=[1,90],$Vi=[5,17,59],$Vj=[1,95],$Vk=[1,94],$Vl=[1,108],$Vm=[1,103],$Vn=[1,104],$Vo=[1,109],$Vp=[2,53],$Vq=[5,7,12,13,17,25,27,34,56,58,59,61,82,83,89,90,91,92,93,94,95,96,97,98,99],$Vr=[5,12,13,17,27,34,56,58,59],$Vs=[1,138],$Vt=[1,139],$Vu=[1,140],$Vv=[5,12,13,17,27,34,56,58,59,82,83,89,94,95,96,97,98,99],$Vw=[1,142],$Vx=[1,143],$Vy=[1,144],$Vz=[1,145],$VA=[5,12,13,17,27,34,56,58,59,82,83,89,90,91,92,93,94,95,96,97,98,99],$VB=[10,82,83,86,88,100],$VC=[1,150],$VD=[13,27],$VE=[12,13];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"program_heading":4,"SEMICOLON":5,"class_list":6,"DOT":7,"PROGRAM":8,"identifier":9,"LPAREN":10,"identifier_list":11,"RPAREN":12,"COMMA":13,"class_identification":14,"BEGIN":15,"class_block":16,"END":17,"CLASS":18,"EXTENDS":19,"variable_declaration_part":20,"func_declaration_list":21,"type_denoter":22,"array_type":23,"ARRAY":24,"LBRAC":25,"range":26,"RBRAC":27,"OF":28,"unsigned_integer":29,"DOTDOT":30,"VAR":31,"variable_declaration_list":32,"variable_declaration":33,"COLON":34,"function_declaration":35,"formal_parameter_list":36,"formal_parameter_section_list":37,"formal_parameter_section":38,"value_parameter_specification":39,"variable_parameter_specification":40,"function_identification":41,"function_block":42,"function_heading":43,"FUNCTION":44,"result_type":45,"statement_part":46,"compound_statement":47,"statement_sequence":48,"statement":49,"assignment_statement":50,"if_statement":51,"while_statement":52,"print_statement":53,"WHILE":54,"boolean_expression":55,"DO":56,"IF":57,"THEN":58,"ELSE":59,"variable_access":60,"ASSIGNMENT":61,"expression":62,"object_instantiation":63,"NEW":64,"params":65,"PRINT":66,"indexed_variable":67,"attribute_designator":68,"method_designator":69,"index_expression_list":70,"index_expression":71,"function_designator":72,"actual_parameter_list":73,"actual_parameter":74,"simple_expression":75,"relop":76,"term":77,"addop":78,"factor":79,"mulop":80,"sign":81,"PLUS":82,"MINUS":83,"primary":84,"unsigned_constant":85,"NOT":86,"unsigned_number":87,"DIGSEQ":88,"OR":89,"STAR":90,"SLASH":91,"MOD":92,"AND":93,"EQUAL":94,"NOTEQUAL":95,"LT":96,"GT":97,"LE":98,"GE":99,"IDENTIFIER":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"SEMICOLON",7:"DOT",8:"PROGRAM",10:"LPAREN",12:"RPAREN",13:"COMMA",15:"BEGIN",17:"END",18:"CLASS",19:"EXTENDS",24:"ARRAY",25:"LBRAC",27:"RBRAC",28:"OF",30:"DOTDOT",31:"VAR",34:"COLON",44:"FUNCTION",54:"WHILE",56:"DO",57:"IF",58:"THEN",59:"ELSE",61:"ASSIGNMENT",64:"NEW",66:"PRINT",82:"PLUS",83:"MINUS",86:"NOT",88:"DIGSEQ",89:"OR",90:"STAR",91:"SLASH",92:"MOD",93:"AND",94:"EQUAL",95:"NOTEQUAL",96:"LT",97:"GT",98:"LE",99:"GE",100:"IDENTIFIER"},
productions_: [0,[3,4],[4,2],[4,5],[11,3],[11,1],[6,5],[6,4],[14,2],[14,4],[16,2],[22,1],[22,1],[23,6],[26,3],[20,3],[20,0],[32,3],[32,1],[33,3],[21,3],[21,1],[21,0],[36,3],[37,3],[37,1],[38,1],[38,1],[39,3],[40,4],[35,3],[35,3],[43,4],[43,5],[45,1],[41,2],[42,2],[46,1],[47,3],[48,1],[48,3],[49,1],[49,1],[49,1],[49,1],[49,1],[52,4],[51,6],[50,3],[50,3],[63,2],[63,3],[53,2],[60,1],[60,1],[60,1],[60,1],[67,4],[70,3],[70,1],[71,1],[68,3],[69,3],[65,3],[73,3],[73,1],[74,1],[74,3],[74,5],[55,1],[62,1],[62,3],[75,1],[75,3],[77,1],[77,3],[81,1],[81,1],[79,2],[79,1],[84,1],[84,1],[84,1],[84,3],[84,2],[85,1],[87,1],[29,1],[72,2],[78,1],[78,1],[78,1],[80,1],[80,1],[80,1],[80,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[9,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    traverseDummy();
    addIn();

    // this removes nodes so it needs to be last
    // TODO: Fix a weird bug where this is either removing
    // nodes and not updating out arrays or incorrectly
    // remove nodes. see tests/if_if.p
    forwardDummies();

    // parse command line flags
    process.argv.slice(3).forEach(function (flag) {
      flags[flag] = true;
    });

    if (flags['--debug']) {
      printDebug = true;
    }

    // which operations to perform
    if (flags['--valnum']) { // perform value numbering
      valueNumbering();
    }
  
    // display the cfg in a particular way
    if (flags['--graph']) {
      printGraph();
    } else {
      printInfo();
    }
  
break;
case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 37: case 43: case 44: case 45: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 72: case 76: case 77: case 79: case 80: case 81: case 82: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98: case 99: case 100: case 101:

  
break;
case 36:

    //console.log(JSON.stringify($$[$0], null, 2));
    enter = $$[$0][0].id;
    exit = $$[$0][$$[$0].length - 1].id;
  
break;
case 38: case 83:

    this.$ = $$[$0-1];
  
break;
case 39:

    this.$ = [$$[$0]];
    addBlock($$[$0]);
    // console.log('$$[$0] ' + JSON.stringify($$[$0], null, 2));
  
break;
case 40:

    var last = $$[$0-2][$$[$0-2].length - 1];
    // console.log('last ' + JSON.stringify(last, null, 2));
    // console.log('$$[$0] ' + JSON.stringify($$[$0], null, 2));

    // merge two adjacent assignment statements
    if (last.type == 'assign' && $$[$0].type == 'assign') {
      last.end = $$[$0].end;
      last.block = last.block.concat($$[$0].block);
    }

    // these can be joined into one block, so just do that
    else if (last.type == 'assign' && $$[$0].type == 'if') {
      last = _.extend(last, {
        end: $$[$0].end,
        block: last.block.concat($$[$0].block),
        type: $$[$0].type,
        out: $$[$0].out
      });
    }

    // these cant be joined, instead forward the dummy
    // node to assignment
    else if (last.type == 'if' && $$[$0].type == 'assign') {
      var left = _.findWhere(blocks, { id: last.out[0] });
      var dummy = _.findWhere(blocks, {  id: left.out [0] });

      // the branch could be another complex statement :S
      if (left.type == 'if' || left.type == 'while')
        lastDummy.out = [addBlock($$[$0]).id];
      else
        dummy.out = [addBlock($$[$0]).id];

      // point the dummy node the next statement
      $$[$0-2].push($$[$0]);
    }

    // these cant be joined, instead point the assign
    // statement to the while condition
    else if (last.type == 'assign' && $$[$0].type == 'while') {
      last.out = [];
      last.out.push(addBlock($$[$0]).id);
      $$[$0-2].push($$[$0]);
    }

    // these cant be joined, instead point the while
    // dummy node to the assign statement
    else if (last.type == 'while' && $$[$0].type == 'assign') {
      var dummy = _.findWhere(blocks, {  id: last.out[1] });

      // point the dummy node the next statement
      dummy.out = [addBlock($$[$0]).id];
      $$[$0-2].push($$[$0]);
    }


    // these cant be joined, instead point the while
    // dummy node to the if condition block
    else if (last.type == 'while' && $$[$0].type == 'if') {
      var dummy = _.findWhere(blocks, {  id: last.out[1] });

      // point the dummy to the start of the if condition
      dummy.out = [addBlock($$[$0]).id];
      $$[$0-2].push($$[$0]);
    }

    // these cant be joined, instead point the if dummy
    // to the while dummy
    else if (last.type == 'if' && $$[$0].type == 'while') {
      var left = _.findWhere(blocks, { id: last.out[0] });
      var dummy = _.findWhere(blocks, {  id: left.out[0] });

      // point the dummy node the next statement
      dummy.out = [addBlock($$[$0]).id];
      $$[$0-2].push($$[$0]);
    }
  
break;
case 41:

    $$[$0].type = 'assign';
  
break;
case 42:

    $$[$0].type = 'compound';
  
break;
case 46:

    $$[$0-2].type = 'while';
    $$[$0-2].out = [];

    addBlock($$[$0-2]);
    if ($$[$0].type == 'compound') {
      $$[$0].forEach(function (t) {
        addBlock(t);
      });

      // connect the condition to the body
      $$[$0-2].out.push($$[$0][0].id);

      if (!$$[$0][$$[$0].length - 1].out) {
        $$[$0][$$[$0].length - 1].out = [];
      }

      // connect the body back to the condition
      var last = $$[$0][$$[$0].length - 1];
      last.out.push($$[$0-2].id);
    }
    else {
      // connect the condition to the body
      $$[$0-2].out.push($$[$0].id);

      if (!$$[$0].out) {
        $$[$0].out = [];
      }

      // connect the body back to the condition
      $$[$0].out.push($$[$0-2].id);
      addBlock($$[$0]);
    }

    // add dummy false condition
    var dummy = addDummy();
    $$[$0-2].out.push(dummy.id);
    dummy.count++;

    this.$ = $$[$0-2];
  
break;
case 47:

    $$[$0-4].type = 'if';
    $$[$0-4].out = [];

    var dummy = addDummy();
    if ($$[$0-2].type == 'compound') {

      // point the condition to the true branch
      $$[$0-4].out.push($$[$0-2][0].id);

      // append dummy node to last of true
      var last = $$[$0-2][$$[$0-2].length - 1];

      // I don't like this, but it works. If you have
      // an if and another if the following assignemnt
      // won't work
      if (!last.out) {
        last.out = [dummy.id];
        dummy.count++;
      }
    }
    else {
      addBlock($$[$0-2]);

      // point the condition to the true branch
      $$[$0-4].out.push($$[$0-2].id);

      // point the true condition the dummy
      $$[$0-2].out = [dummy.id];
      dummy.count++;
    }

    // same rules as true branch
    if ($$[$0].type == 'compound') {
      $$[$0-4].out.push($$[$0][0].id);

      // append dummy
      var last = $$[$0][$$[$0].length - 1];
      if (!last.out) {
        last.out = [dummy.id];
        dummy.count++;
      }
    }
    else {
      addBlock($$[$0]);

      $$[$0-4].out.push($$[$0].id);
      $$[$0].out = [dummy.id];
      dummy.count++;
    }

    this.$ = $$[$0-4];
    /* console.log(JSON.stringify($$[$0-4], null, 2)); */
  
break;
case 48:

    $$[$0].block.push($$[$0-2] + ' = ' + $$[$0].end);
    $$[$0].end = $$[$0-2];
    this.$ = $$[$0];
    //console.log(JSON.stringify(this.$, null, 2));
  
break;
case 71:

    var t = 't'+ count++;
    var merge = t + ' = ' + $$[$0-2].end + ' ' + $$[$0-1] + ' ' +  $$[$0].end;
    this.$ = {
      start: $$[$0-2].start || $$[$0].start || t,
      end: t,
      block: $$[$0-2].block.concat($$[$0].block).concat(merge)
    };
    //console.log('e: ' + JSON.stringify(this.$, null, 2));
  
break;
case 73:

    var t = 't'+ count++;
    var merge = t + ' = ' + $$[$0-2].end + ' ' + $$[$0-1] + ' ' + $$[$0].end;
    this.$ = {
      start: $$[$0-2].start || $$[$0].start || t,
      end: t,
      block: $$[$0-2].block.concat($$[$0].block).concat(merge)
    };
    //console.log('se: ' + JSON.stringify(this.$, null, 2));
  
break;
case 74:

    // check if factory was a primary of just a factor
    if (typeof $$[$0] == 'string') {
      this.$ = {
        end: $$[$0],
        block: []
      };
    }
  
break;
case 75:

    var t = 't'+ count++;
    var merge = t + ' = ' + $$[$0-2].end + ' ' + $$[$0-1] + ' ' + ($$[$0].end || $$[$0]);
    this.$ = {
      start: $$[$0-2].start || $$[$0].start || t,
      end: t,
      block: _.compact($$[$0-2].block.concat($$[$0].block).concat(merge))
    };
    /* console.log('term: ' + JSON.stringify(this.$, null, 2)); */
  
break;
case 78:

    var t = 't'+ count++;
    if (typeof $$[$0] == 'string') {
      this.$ = {
        start: t,
        end: t,
        block: [t + ' = ' + 0 + ' - ' + $$[$0]]
      };
    } else {
      this.$ = {
        start: $$[$0].start || t,
        end: t,
        block: $$[$0].block.concat([t + ' = ' + 0 + ' - ' + $$[$0].end])
      };
    }
  
break;
case 102:

    this.$ = $$[$0].toLowerCase();
  
break;
}
},
table: [{3:1,4:2,8:[1,3]},{1:[3]},{5:[1,4]},{9:5,100:$V0},{6:7,14:8,18:$V1},{5:[2,2],10:[1,10]},o([5,7,10,12,13,15,17,19,25,27,34,56,58,59,61,82,83,89,90,91,92,93,94,95,96,97,98,99],[2,102]),{7:[1,11],14:12,18:$V1},{15:[1,13]},{9:14,100:$V0},{9:16,11:15,100:$V0},{1:[2,1]},{15:[1,17]},o($V2,$V3,{16:18,20:19,31:$V4}),{15:[2,8],19:[1,21]},{12:[1,22],13:$V5},o($V6,[2,5]),o($V2,$V3,{20:19,16:24,31:$V4}),{17:[1,25]},o($V7,[2,22],{21:26,35:27,41:28,43:29,44:$V8}),{9:16,11:33,32:31,33:32,100:$V0},{9:34,100:$V0},{5:[2,3]},{9:35,100:$V0},{17:[1,36]},o($V9,[2,7]),{5:[1,37],17:[2,10]},o($V7,[2,21]),{5:[1,38]},{5:[1,39]},{9:40,100:$V0},{5:[1,41]},{5:[2,18]},{13:$V5,34:[1,42]},{15:[2,9]},o($V6,[2,4]),o($V9,[2,6]),{35:43,41:28,43:29,44:$V8},{15:$V3,20:45,31:$V4,42:44},{15:$V3,20:45,31:$V4,42:46},{5:[2,35],10:[1,49],34:[1,47],36:48},o([5,15,17,44],[2,15],{9:16,11:33,33:50,100:$V0}),{9:53,22:51,23:52,24:$Va,100:$V0},o($V7,[2,20]),o($V7,[2,30]),{15:$Vb,46:55,47:56},o($V7,[2,31]),{9:59,45:58,100:$V0},{34:[1,60]},{9:16,11:65,31:$Vc,37:61,38:62,39:63,40:64,100:$V0},{5:[2,17]},{5:[2,19]},{5:[2,11]},{5:[2,12]},{25:[1,67]},o($V7,[2,36]),o($V7,[2,37]),{9:79,15:$Vb,47:71,48:68,49:69,50:70,51:72,52:73,53:74,54:$Vd,57:$Ve,60:75,66:$Vf,67:80,68:81,69:82,100:$V0},{5:[2,32]},{5:[2,34]},{9:59,45:83,100:$V0},{5:[1,85],12:[1,84]},o($Vg,[2,25]),o($Vg,[2,26]),o($Vg,[2,27]),{13:$V5,34:[1,86]},{9:16,11:87,100:$V0},{26:88,29:89,88:$Vh},{5:[1,92],17:[1,91]},o($V7,[2,39]),o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,[2,43]),o($Vi,[2,44]),o($Vi,[2,45]),{7:$Vj,25:$Vk,61:[1,93]},{9:110,10:$Vl,29:112,55:96,60:105,62:97,67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:110,10:$Vl,29:112,55:113,60:105,62:97,67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:79,60:114,67:80,68:81,69:82,100:$V0},o([5,7,17,25,59,61],$Vp),o($Vq,[2,54]),o($Vq,[2,55]),o($Vq,[2,56]),{5:[2,33]},{34:[2,23]},{9:16,11:65,31:$Vc,38:115,39:63,40:64,100:$V0},{9:116,100:$V0},{13:$V5,34:[1,117]},{27:[1,118]},{30:[1,119]},o([5,12,13,17,27,30,34,56,58,59,82,83,89,90,91,92,93,94,95,96,97,98,99],[2,87]),o($Vi,[2,38]),{9:79,15:$Vb,47:71,49:120,50:70,51:72,52:73,53:74,54:$Vd,57:$Ve,60:75,66:$Vf,67:80,68:81,69:82,100:$V0},{9:110,10:$Vl,29:112,60:105,62:121,63:122,64:[1,123],67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:110,10:$Vl,29:112,60:105,62:126,67:80,68:81,69:82,70:124,71:125,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:127,72:128,100:$V0},{58:[1,129]},o([56,58],[2,69]),o($Vr,[2,70],{76:130,78:131,82:$Vs,83:$Vt,89:$Vu,94:[1,132],95:[1,133],96:[1,134],97:[1,135],98:[1,136],99:[1,137]}),o($Vv,[2,72],{80:141,90:$Vw,91:$Vx,92:$Vy,93:$Vz}),o($VA,[2,74]),{9:110,10:$Vl,29:112,60:105,67:80,68:81,69:82,72:107,79:146,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o($VA,[2,79]),o($VB,[2,76]),o($VB,[2,77]),o($VA,[2,80],{7:$Vj,25:$Vk}),o($VA,[2,81]),o($VA,[2,82]),{9:110,10:$Vl,29:112,60:105,62:147,67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:110,10:$Vl,29:112,60:105,67:80,68:81,69:82,72:107,84:148,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o([5,7,12,13,17,25,27,34,56,58,59,82,83,89,90,91,92,93,94,95,96,97,98,99],$Vp,{65:149,10:$VC}),o($VA,[2,85]),o($VA,[2,86]),{56:[1,151]},o($Vi,[2,52],{7:$Vj,25:$Vk}),o($Vg,[2,24]),o($Vg,[2,28]),{9:152,100:$V0},{28:[1,153]},{29:154,88:$Vh},o($V7,[2,40]),o($Vi,[2,48]),o($Vi,[2,49]),{9:155,100:$V0},{13:[1,157],27:[1,156]},o($VD,[2,59]),o($VD,[2,60]),o($Vq,[2,61],{65:149,10:$VC}),o($Vq,[2,62]),{9:79,15:$Vb,47:71,49:158,50:70,51:72,52:73,53:74,54:$Vd,57:$Ve,60:75,66:$Vf,67:80,68:81,69:82,100:$V0},{9:110,10:$Vl,29:112,60:105,67:80,68:81,69:82,72:107,75:159,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:110,10:$Vl,29:112,60:105,67:80,68:81,69:82,72:107,77:160,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o($VB,[2,96]),o($VB,[2,97]),o($VB,[2,98]),o($VB,[2,99]),o($VB,[2,100]),o($VB,[2,101]),o($VB,[2,89]),o($VB,[2,90]),o($VB,[2,91]),{9:110,10:$Vl,29:112,60:105,67:80,68:81,69:82,72:107,79:161,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o($VB,[2,92]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,95]),o($VA,[2,78]),{12:[1,162]},o($VA,[2,84]),o($Vq,[2,88]),{9:110,10:$Vl,29:112,60:105,62:165,67:80,68:81,69:82,72:107,73:163,74:164,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:79,15:$Vb,47:71,49:166,50:70,51:72,52:73,53:74,54:$Vd,57:$Ve,60:75,66:$Vf,67:80,68:81,69:82,100:$V0},o($Vg,[2,29]),{9:53,22:167,23:52,24:$Va,100:$V0},{27:[2,14]},o($Vi,[2,50],{65:168,10:$VC}),o($Vq,[2,57]),{9:110,10:$Vl,29:112,60:105,62:126,67:80,68:81,69:82,71:169,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{59:[1,170]},o($Vr,[2,71],{78:131,82:$Vs,83:$Vt,89:$Vu}),o($Vv,[2,73],{80:141,90:$Vw,91:$Vx,92:$Vy,93:$Vz}),o($VA,[2,75]),o($VA,[2,83]),{12:[1,171],13:[1,172]},o($VE,[2,65]),o($VE,[2,66],{34:[1,173]}),o($Vi,[2,46]),{5:[2,13]},o($Vi,[2,51]),o($VD,[2,58]),{9:79,15:$Vb,47:71,49:174,50:70,51:72,52:73,53:74,54:$Vd,57:$Ve,60:75,66:$Vf,67:80,68:81,69:82,100:$V0},o($Vq,[2,63]),{9:110,10:$Vl,29:112,60:105,62:165,67:80,68:81,69:82,72:107,74:175,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},{9:110,10:$Vl,29:112,60:105,62:176,67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o($Vi,[2,47]),o($VE,[2,64]),o($VE,[2,67],{34:[1,177]}),{9:110,10:$Vl,29:112,60:105,62:178,67:80,68:81,69:82,72:107,75:98,77:99,79:100,81:101,82:$Vm,83:$Vn,84:102,85:106,86:$Vo,87:111,88:$Vh,100:$V0},o($VE,[2,68])],
defaultActions: {11:[2,1],22:[2,3],32:[2,18],34:[2,9],50:[2,17],51:[2,19],52:[2,11],53:[2,12],58:[2,32],59:[2,34],83:[2,33],84:[2,23],154:[2,14],167:[2,13]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


  var printDebug = false;

  var debug = function (obj) {
    if (printDebug) {
      console.log(obj)
    }
  };

  var _ = require('underscore')
    , blocks = []
    , flags = {}
    , id = 0
    , enter = null, exit = null
    , lastDummy = null
    , IDENTIFIER = /[a-zA-Z][a-zA-Z0-9]+/
    , count = 0;

    // go through every block and print out
    // all uniq left hand side values
    var printVars = function() {
      var combined = _.chain(blocks)
        .pluck('block')
        .flatten()
        .compact()
        .map(function(block) {
          return block.match(IDENTIFIER);
        })
        .flatten()
        .uniq()
        .sort()
        .value()

      console.log('Vars (output 1)');
      combined.forEach(function(varName) {
        console.log(varName);
      });
      console.log();
    };

    var addBlock = function (block) {
      if (block.id != null) {
        return block;
      }

      block.in = [];

      // make sure start is set
      if (!block.start) {
        block.start = block.end;
      }

      // add id for graph
      block.id = id++;
      // add block to list
      blocks.push(block);

      return block;
    }

    // helper method for adding dummies as blocks
    // note: sets the 'lastDummy' for connect consecutive
    // dummies
    var addDummy = function () {
      var dummy = addBlock({ dummy: true, count: 0, out: [] });

      // this is for connecting consecutive dummy nodes
      if (lastDummy && !lastDummy.out.length) {
        lastDummy.out = [dummy.id];
        dummy.count++;
      }

      lastDummy = dummy;

      return dummy;
    };

    // check if exit has a dummy node,
    // if it does, traverse the dummies
    var traverseDummy = function() {
      var exitNode = blocks[exit];
      if (!exitNode.out) {
        return;
      }

      var complex = isComplex(exitNode);
      var dummy = blocks[exitNode.out[complex]];

      while (dummy.out.length) {
        complex = isComplex(dummy);
        dummy = blocks[dummy.out[complex]];
      }

      exit = dummy.id;
    };


    // Checks if we need to look at the out[0] or
    // out[1]
    var isComplex = function(block) {
      return (block.type == 'if' || block.type == 'while') ? 1 : 0;
    }

    // print the vars, entry, exit
    var printInfo = function () {
      console.log(JSON.stringify(blocks, null, 2));
      printVars();
      console.log('enter block id: ' + enter);
      console.log('exit block id: ' + exit);
    };

    var printGraph = function () {
      console.log('digraph cfg {');
      console.log('node [style=filled, shape=box]');
      var start = blocks.filter(function (b) {
        return b.id ==  enter;
      })[0];
      console.log('start -> "' + start.id + '\n' + start.block.join('\n') + '"');

      blocks.forEach(function (b) {
        if (b.block) {
          var node = '"' + b.id + '\n' + b.block.join('\n') + '"';
        } else {
          var node = '"' + b.id + '\ndummy"';
        }
        /* console.log(node); */
        if (b.out) {
          b.out.forEach(function (o) {
            var to = blocks.filter(function (b) {
              return b.id ==  o;
            })[0]
            if (to.block) {
              console.log(node + '->' + '"' + to.id + '\n' + to.block.join('\n') + '"' + ";");
            } else {
              console.log(node + '->' + ' "' + to.id + '\ndummy"');
            }
          })
        }
      })

      var end = blocks.filter(function (b) {
        return b.id == exit;
      })[0];
      if (end.block) {
        console.log('end -> "' + end.id + '\n' + end.block.join('\n') + '"');
      } else {
        console.log('end ->' + ' "' + end.id + '\ndummy"');
      }

      console.log('}');
    }

    // Point a dummy to the next node
    var forwardDummy = function (dummies, block) {
      if (block.out) {
        var forward = false;
        var out = block.out.map(function (o) {
          if (dummies[o] && dummies[o].out > 0) {
            dummies[o].count--;
            forward = true;
            return dummies[o].out;
          } else {
            return [o];
          }
        })
        var flat = [].concat.apply([], out);
        block.out = flat;
        if (forward) {
          forwardDummies(dummies, block);
        }
      }
    };

    // Forward all nodes that point to dummies to w/e
    // the next dummy points too
    var forwardDummies = function () {
      var dummies = blocks.reduce(function (map, b) {
        if (b.dummy) {
          map[b.id] = b;
        }
        return map;
      }, {});
      blocks.forEach(function (block) {
        forwardDummy(dummies, block)
      });
      blocks = blocks.filter(function (block) {
        if (block.count < 1) {
          return false
        } else {
          return true;
        }
      })
    };

    // Add parent nodes
    var addIn = function () {
      blocks.forEach(function(block) {

        block.out && block.out.forEach(function(out) {
          var to = _.findWhere(blocks, { id: out });
          to.in.push(block.id);
        });

      });
    };

    // Go through each statement in a block
    // and perform value numbering
    var processBlock = function (b) {

        // value numbers
        var v = {};

        // hash values
        var h = {};
        var hashes = 0;
        var index = 0;
        var block = b.block;

        // create a new hash, note if a
        // id is a NUMBER add it as a const
        var newHash = function(id) {
          var hash = '#' + ++hashes;
          v[id] = {
            hash: hash
          };

          h[hash] = {
            expr: hash,
            hash: hash
          };

          // if number, dont add to table
          // just return it
          if (!isNaN(+id)) {
            v[id].const = true;
            v[id].value = Number(id);
          }

          return v[id];
        };

        // simply look up the var in the value
        // table, if not found create a new hash for it
        var lookup = function(id) {
          if (id == undefined) return {};

          return v[id] || newHash(id);
        };

        // check to see if there has already
        // been a expression with same hash,
        // if so we will reduce to that expression
        var findPrev = function(hash) {
          for (var key in v)
            if (v[key].hash == hash)
              return key;
        }

        // finds the expression in the h table
        var findExpr = function(op, v1, v2) {
          var h1 = v1.hash;
          var h2 = v2.hash;
          var expr;

          // if its commutative, then make sure to
          // order the larger hash first
          if (op == '+' || op == '*') {
            var v1 = h1 && Number(h1.slice(1));
            var v2 = h2 && Number(h2.slice(1));
            expr = (v2 > v1) ? [op, h2, h1] : [op, h1, h2];
          }
          else {
            expr = [op, h1, h2];
          }

          // join the hashes, i.e +#2#1
          expr = expr.join('');

          // search for the hash in the hashes
          // make sure to check hash and expr in
          // case of complex expressions like #3: +#2#1
          var exists = _.chain(h)
            .values()
            .find(function (row) {
              return row.expr == expr || row.hash == expr;
            })
            .value()

          // if it exists, make sure to return the HASH,
          // i.e #3, not +#2#1
          if (exists) {
            return exists.hash;
          }

          // add a new has if not found
          var hash = '#' + ++hashes;
          h[hash] = {
            expr: expr, // combined expr
            hash: hash  // the lhs
          };

          return hash;
        };

        // parse an assignment and return an object
        // a = b + c ---> <a> = <b> <op> <c>
        var parseExpr = function(expr) {
          var expr = expr.split(' ');
          return {
            a: expr[0],
            b: expr[2],
            op: expr[3],
            c: expr[4]
          }
        };

        var numberedBlock = [];

        // comment out to compare
        if (!flags['--graph']) {
          console.log('block '+ JSON.stringify(block, null, 2));
        }

        // go through each expression in a block
        // and perform number value stuff on it
        block.forEach(function(expr) {
          var expr = parseExpr(expr);
          var v1 = lookup(expr.b);
          var v2 = lookup(expr.c);
          var hash = findExpr(expr.op, v1, v2);
          var prev = findPrev(hash);

          // aa = 1 + 2
          // aa = bb + 1 where aa is a constant
          // aa = 1 + cc where cc is a constant
          // aa = dd + ee where dd and cc is a constant
          if (v1.const && v2.const) {
            v[expr.a] = {
              const: true,
              value: eval(v1.value + expr.op + v2.value),
              hash: hash
            };
          }

          // aa = 1
          // aa = bb // where bb is a const
          else if (v1.const && _.isEmpty(v2)) {
            v[expr.a] = {
              const: true,
              value: v1.value,
              hash: hash
            };
          }

          // aa = cc where cc is not a constant
          // aa = aa + bb where aa and bb are not constants
          else {
            v[expr.a] = {
              hash: hash
            };
          }

          // build the statement
          if(v[expr.a].const) { // handle constants
            var statement = expr.a + ' = ' + v[expr.a].value;
          } else {
            var rhs = prev || (expr.b + ' ' + expr.op + ' ' + expr.c);
            var statement = expr.a + ' = ' + rhs;
          }

          // add the reduced statement to the block
          numberedBlock.push(statement);
        });

        // console.log('v ' + JSON.stringify(v, null, 2));
        // console.log('h ' + JSON.stringify(h, null, 2));
        if (!flags['--graph']) {
          console.log('reduced block '+ JSON.stringify(numberedBlock, null, 2));
        }

        b.block = numberedBlock;
    };

    var valueNumbering = function() {
      blocks.forEach(processBlock);
    };
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 8; 
break;
case 2: return 93; 
break;
case 3: return 24; 
break;
case 4: return 18; 
break;
case 5: return 56; 
break;
case 6: return 59; 
break;
case 7: return 17; 
break;
case 8: return 19; 
break;
case 9: return 44; 
break;
case 10: return 57; 
break;
case 11: return 92; 
break;
case 12: return 64; 
break;
case 13: return 86; 
break;
case 14: return 28; 
break;
case 15: return 89; 
break;
case 16: return 66; 
break;
case 17: return 15; 
break;
case 18: return 58; 
break;
case 19: return 31; 
break;
case 20: return 54; 
break;
case 21: return 100; 
break;
case 22: return 61; 
break;
case 23: return 34; 
break;
case 24: return 13; 
break;
case 25: return 88; 
break;
case 26: return 7;
break;
case 27: return 30; 
break;
case 28: return 94; 
break;
case 29: return 99; 
break;
case 30: return 97; 
break;
case 31: return 25; 
break;
case 32: return 98; 
break;
case 33: return 10; 
break;
case 34: return 96; 
break;
case 35: return 83; 
break;
case 36: return 95; 
break;
case 37: return 82; 
break;
case 38: return 27; 
break;
case 39: return 12; 
break;
case 40: return 5; 
break;
case 41: return 91; 
break;
case 42: return 90; 
break;
case 43:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:PROGRAM)/i,/^(?:AND)/i,/^(?:ARRAY)/i,/^(?:CLASS)/i,/^(?:DO)/i,/^(?:ELSE)/i,/^(?:END)/i,/^(?:EXTENDS)/i,/^(?:FUNCTION)/i,/^(?:IF)/i,/^(?:MOD)/i,/^(?:NEW)/i,/^(?:NOT)/i,/^(?:OF)/i,/^(?:OR)/i,/^(?:PRINT)/i,/^(?:BEGIN)/i,/^(?:THEN)/i,/^(?:VAR)/i,/^(?:WHILE)/i,/^(?:[a-zA-Z]([a-zA-Z0-9])+)/i,/^(?::=)/i,/^(?::)/i,/^(?:,)/i,/^(?:[0-9]+)/i,/^(?:\.)/i,/^(?:\.\.)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\[)/i,/^(?:<=)/i,/^(?:\()/i,/^(?:<)/i,/^(?:-)/i,/^(?:<>)/i,/^(?:\+)/i,/^(?:\])/i,/^(?:\))/i,/^(?:;)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}